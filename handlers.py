import json
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config import ADMIN_IDS

router = Router()
DB_PATH = "database.json"

class CloseShift(StatesGroup):
    waiting_for_photo = State()
    waiting_for_next_worker = State()

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–í—ñ–¥–∫—Ä–∏—Ç–∏ –º–∞–≥–∞–∑–∏–Ω"), KeyboardButton(text="–ó–∞–∫—Ä–∏—Ç–∏ –º–∞–≥–∞–∑–∏–Ω")],
        [KeyboardButton(text="–ó–≤—ñ—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")]
    ],
    resize_keyboard=True
)

def load_db():
    try:
        with open(DB_PATH, "r") as f:
            return json.load(f)
    except:
        return {}

def save_db(data):
    with open(DB_PATH, "w") as f:
        json.dump(data, f, indent=2)

@router.message(F.text == "/start")
async def start(message: types.Message):
    await message.answer("üëã –í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu)

@router.message(F.text.lower() == "–≤—ñ–¥–∫—Ä–∏—Ç–∏ –º–∞–≥–∞–∑–∏–Ω")
async def open_shift(message: types.Message):
    db = load_db()
    today = datetime.now().strftime("%Y-%m-%d")
    uid = str(message.from_user.id)
    db.setdefault(today, {})[uid] = {
        "name": message.from_user.full_name,
        "open_time": datetime.now().strftime("%H:%M"),
        "photo": None,
        "next": None
    }
    save_db(db)
    await message.answer("‚úÖ –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–∞–≥–∞–∑–∏–Ω—É –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ.")

@router.message(F.text.lower() == "–∑–∞–∫—Ä–∏—Ç–∏ –º–∞–≥–∞–∑–∏–Ω")
async def close_shift_start(message: types.Message, state: FSMContext):
    await message.answer("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –º–∞–≥–∞–∑–∏–Ω—É –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä–∏—Ç—Ç—è–º.")
    await state.set_state(CloseShift.waiting_for_photo)

@router.message(CloseShift.waiting_for_photo, F.photo)
async def close_shift_photo(message: types.Message, state: FSMContext):
    db = load_db()
    today = datetime.now().strftime("%Y-%m-%d")
    uid = str(message.from_user.id)
    if today in db and uid in db[today]:
        db[today][uid]["photo"] = message.photo[-1].file_id
        save_db(db)
        await message.answer("üë§ –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ü–Ü–ë —Ç–æ–≥–æ, —Ö—Ç–æ –ø—Ä–∞—Ü—é—î –∑–∞–≤—Ç—Ä–∞:")
        await state.set_state(CloseShift.waiting_for_next_worker)
    else:
        await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–∫—Ä–∏–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω.")
        await state.clear()

@router.message(CloseShift.waiting_for_next_worker)
async def close_shift_name(message: types.Message, state: FSMContext):
    db = load_db()
    today = datetime.now().strftime("%Y-%m-%d")
    uid = str(message.from_user.id)
    if today in db and uid in db[today]:
        if not db[today][uid]["photo"]:
            await message.answer("‚ö†Ô∏è –ù–µ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ —Ñ–æ—Ç–æ.")
            return
        db[today][uid]["next"] = message.text
        save_db(db)
        await message.answer("‚úÖ –ó–∞–∫—Ä–∏—Ç—Ç—è –º–∞–≥–∞–∑–∏–Ω—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
    await state.clear()

@router.message(F.text.lower() == "–∑–≤—ñ—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
    db = load_db()
    if not db:
        return await message.answer("üì≠ –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤.")
    report = ""
    for day, entries in sorted(db.items(), reverse=True):
        report += f"üìÖ {day}:
"
        for uid, entry in entries.items():
            status = "‚úÖ" if entry["photo"] else "‚ùå –ë–µ–∑ —Ñ–æ—Ç–æ"
            report += (
                f"üë§ {entry['name']} –æ {entry['open_time']} | "
                f"{status} | –Ω–∞—Å—Ç—É–ø–Ω–∏–π: {entry.get('next', '‚Äî')}
"
            )
    await message.answer(report.strip())
